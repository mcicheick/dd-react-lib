{"version":3,"sources":["../../src/alert/index.js","../../src/data-grid/index.js","../../src/chart/index.js","../../src/index.js","App.js","index.js"],"names":["useStyles","makeStyles","root","width","marginTop","theme","DDAlert","props","classes","useState","alert","setAlert","title","setTitle","message","setMessage","show","setShow","componentWillUnmount","$alert","document","handleAlert","event","detail","setTimeout","useEffect","id","className","styles","severity","dangerouslySetInnerHTML","__html","sendAlert","CustomEvent","sendErrorAlert","type","timeout","sendInfoAlert","DDDataGrid","gridApi","setGridApi","upsertItem","item","value","field","method","fetch","headers","body","JSON","res","response","force","rowNodes","error","getSchemes","result","scheme","key","formatter","myKey","Array","data","getQueryParams","params","query","param","searchData","filter","pageNumber","pageSize","url","config","search","getDatasource","getRows","fields","myFilterModel","Object","filterModel","sortModel","getData","request","console","totalCount","page","Math","Error","columns","getColumnDefs","style","onGridReady","rowData","columnDefs","animateRows","enableCellChangeFlash","enableColResize","rowModelType","onCellValueChanged","DDChart","chartApi","setChartApi","ctx","useRef","destroyApi","accumulator","getLabelColor","labels","dataGroupKey","color","r","g","b","a","label","options","scales","yAxes","ticks","beginAtZero","labelKey","initialData","labelKeyValue","groupedData","_","getLabels","datasets","getDataset","dataGroup","labelColor","labelValue","backgroundColor","getBackgroundColor","borderColor","getBorderColor","dataset","borderWidth","groupName","dataByGroupName","chart","ref","height","ExampleComponent","text","margin","spacing","App","headerName","resizable","rows","col1","col2","setData","autoLoad","setAutoLoad","dataFromParent","setDataFromParent","autoChart","setAutoChart","chartWithData","setChartWithData","then","json","entities","createMuiTheme","palette","primary","green","secondary","blue","Container","ThemeProvider","Button","variant","onClick","e","log","Checkbox","checked","onChange","target","columnsPath","dataPath","columnMapper","column","myColumn","assign","marginBottom","api","setRowData","setColumnDefs","moment","createDate","format","gender","backgroundOpacity","borderOpacity","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.19809247.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Alert, AlertTitle} from '@material-ui/lab'\n\nimport styles from './index.css'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nconst DD_ALERT_EVENT = 'dd-alert-event';\n\nexport function DDAlert(props) {\n  const classes = useStyles();\n  const [alert, setAlert] = useState('info');\n  const [title, setTitle] = useState('');\n  const [message, setMessage] = useState('');\n  const [show, setShow] = useState(props.show);\n\n  const componentWillUnmount = () => {\n    let $alert = document.getElementById('DDAlert');\n    if ($alert) {\n      $alert.removeEventListener(DD_ALERT_EVENT);\n    }\n  }\n\n  const componentDidMount = () => {\n    let $alert = document.getElementById('DDAlert');\n    if ($alert) {\n      $alert.addEventListener(DD_ALERT_EVENT, handleAlert);\n      $alert.addEventListener('click', () => setShow(false));\n    }\n    return componentWillUnmount;\n  }\n\n  const handleAlert = (event) => {\n    let detail = event.detail;\n    setAlert(detail.alert);\n    setTitle(detail.title);\n    setMessage(detail.message);\n    setShow(true);\n    if (detail.timeout > 0) {\n      setTimeout(() => {\n        setShow(false);\n      }, detail.timeout);\n    }\n  }\n\n  useEffect(componentDidMount, []);\n\n  return (\n    <div id={'DDAlert'} className={styles.Alert + (show ? '' : ' ' + styles.hide)}>\n      <div className={classes.root}>\n        <Alert severity={alert}>\n          <AlertTitle>{title}</AlertTitle>\n          <div dangerouslySetInnerHTML={{__html: message}}/>\n        </Alert>\n      </div>\n    </div>\n  );\n}\n\nexport function sendAlert(event) {\n  let $alert = document.getElementById('DDAlert');\n  if ($alert) {\n    $alert.dispatchEvent(new CustomEvent(event.type, {detail: event}));\n  }\n}\n\nexport function sendErrorAlert(event) {\n  sendAlert({type: DD_ALERT_EVENT, alert: 'error', title: event.title, message: event.message, timeout: event.timeout})\n}\n\nexport function sendSuccessAlert(event) {\n  sendAlert({type: DD_ALERT_EVENT, alert: 'success', title: event.title, message: event.message, timeout: event.timeout})\n}\n\nexport function sendInfoAlert(event) {\n  sendAlert({type: DD_ALERT_EVENT, alert: 'info', title: event.title, message: event.message, timeout: event.timeout})\n}\n\nexport function sendWarningAlert(event) {\n  sendAlert({type: DD_ALERT_EVENT, alert: 'warning', title: event.title, message: event.message, timeout: event.timeout})\n}\n","import React, {useEffect, useState} from 'react';\nimport {AgGridReact} from 'ag-grid-react';\n\nimport {sendErrorAlert} from '../alert'\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\n// import styles from './index.css'\n\nconst DEFAULT_PAGE_SIZE = 100;\n\nexport function DDDataGrid(props) {\n\n  const [gridApi, setGridApi] = useState(null);\n\n  /**\n   * If props.onGridReady is defined all agGrid management is delegated to the parent component.\n   * @param params\n   */\n  const onGridReady = (params) => {\n    setGridApi(params.api);\n\n    if (props.onGridReady) {\n      props.onGridReady(params);\n    }\n    if (params.api && props.dataPath) {\n      params.api.setDatasource(getDatasource());\n    }\n  }\n\n  /**\n   * Send event to the parent component if props.onCellValueChanged is defined.\n   * @param event\n   */\n  const onCellValueChanged = (event) => {\n    if (props.onCellValueChanged) {\n      props.onCellValueChanged(event);\n    } else {\n      upsertItem(event);\n    }\n  }\n\n  /**\n   * it props.dataPath is defined upsert item selected.\n   * @param event\n   */\n  const upsertItem = (event) => {\n    if(!props.dataPath) {\n      return;\n    }\n    let item = {\n      id: event.data.id\n    };\n    let value = event.value;\n    let field = event.colDef.field;\n    item[field] = value;\n    if (event.colDef.type === 'object') {\n      item[field] = {id: value * 1};\n    }\n    let method = 'PUT';\n    if (item.id === null) {\n      item = event.data;\n      method = 'POST';\n    }\n    fetch(props.dataPath, {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(item)\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.code && response.code / 100 !== 2) {\n          sendErrorAlert({\n            title: event.colDef.headerName,\n            message: response.message\n          });\n        } else {\n          event.node.setData(response);\n          event.api.refreshCells({force: true, rowNodes: [event.node]});\n        }\n      })\n      .catch(error => {\n        sendErrorAlert({\n          title: event.colDef.headerName,\n          message: error.message || 'Error on update'\n        });\n      });\n  }\n\n  /**\n   * Convert {schemes: []} into schemes list by adding default formatter function.\n   * If props.columnMapper is defined it is called at the end to update colDef value.\n   * @param result\n   * @returns {*[]}\n   */\n  const getSchemes = (result) => {\n    let myFormatter = (key) => {\n      return (data) => {\n        if (!data) {\n          return ''\n        }\n        let myKey = key;\n        if (Array.isArray(data[myKey])) {\n          return `${data[myKey].length} element${data[myKey].length > 1 ? 's' : ''}`\n        }\n        if (data[myKey] && typeof data[myKey] === 'object') {\n          return data[myKey].id\n        }\n        return data[myKey];\n      };\n    };\n    let myMapper = scheme => {\n      let formatter = myFormatter(scheme.field);\n      let cellRenderer = (data) => {\n        return formatter(data.data);\n      }\n      scheme.formatter = formatter;\n      scheme.cellRenderer = cellRenderer;\n      return props.columnMapper ? props.columnMapper(scheme) : scheme;\n    };\n    return (result.schemes || []).map(myMapper);\n  }\n\n  /**\n   * Retrieve columns definition using props.columnsPath.\n   * This action is triggered when gridApi is defined and props.columnsPath.\n   */\n  const getColumnDefs = () => {\n    if (!gridApi) {\n      return;\n    }\n    let url = `${props.columnsPath}${getQueryParams()}`;\n    fetch(url, {headers: {'Accept': 'application/json'}})\n      .then(res => {\n        console.log(res);\n        return res.json()\n      })\n      .then(result => {\n        console.log('result', result);\n        if (result.code && result.code / 100 !== 2) {\n          throw Error(result.message);\n        } else {\n          let columns = getSchemes(result);\n          console.log('columns', columns);\n          if (gridApi) {\n            gridApi.setColumnDefs(columns);\n          }\n        }\n      })\n      .catch(error => {\n        console.log('error', error);\n      });\n  }\n\n  /**\n   * Convert { [param: string]: string; } into queryParams: url-encoded\n   * @param params\n   * @returns {string}\n   */\n  const getQueryParams = (params?: { [param: string]: string; }) => {\n    let query = '';\n    if (params) {\n      for (const param in params) {\n        if (query === '') {\n          query = `${param}=${params[param]}`;\n        } else {\n          query = query + `&${param}=${params[param]}`;\n        }\n      }\n    }\n    return (query !== '' ? '?' : '') + query;\n  }\n\n  /**\n   * Search using ag-grid filter model.\n   * @param body : AdGrid Filter Data Model\n   * @param params : Query Params\n   * @returns {Promise<T>}\n   */\n  const search = (body: any | null, params?: { [param: string]: string; }) => {\n    let url = `${props.dataSearchPath || props.dataPath}`;\n    let method = 'POST';\n    if (params) {\n      let query = getQueryParams(params)\n      url = `${url}${query}`;\n    }\n    if (!props.dataSearchPath) {\n      method = 'GET'\n    }\n    let config = {\n      method: method\n    }\n    if (method === 'POST') {\n      config.body = JSON.stringify(body);\n      config.headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    }\n    return fetch(url, config).then(res => res.json());\n  }\n\n  /**\n   * @see search\n   * @param filter\n   * @param pageNumber\n   * @param pageSize\n   * @returns {Promise<T>}\n   */\n  const searchData = (filter: any, pageNumber: number = -1, pageSize: number = -1) => {\n    let params = {};\n    params['page'] = `${pageNumber}`;\n    params['perPage'] = `${pageSize}`;\n    return search(filter, params);\n  }\n\n  /**\n   * called from getDatasource.\n   * @param pageNumber\n   * @param pageSize\n   * @returns {Promise<T>}\n   */\n  const getData = (pageNumber: number = -1, pageSize: number = -1) => {\n    let url = `${props.dataPath}?page=${pageNumber}&perPage=${pageSize}`;\n    return fetch(url, {headers: {'Accept': 'application/json'}}).then(res => res.json())\n  }\n\n  /**\n   * AgGrid DataSource\n   * @returns {{getRows: IDatasource.getRows}}\n   */\n  const getDatasource = () => {\n    return {\n      getRows: (params) => {\n        const pageNumber = params.endRow / DEFAULT_PAGE_SIZE;\n        let request;\n        const fields = [];\n        let myFilterModel = params.filterModel;\n        if (props.filterModel) {\n          myFilterModel = Object.assign({}, myFilterModel, props.filterModel);\n        }\n        for (const field in myFilterModel) {\n          if (myFilterModel.hasOwnProperty(field)) {\n            fields.push(field);\n          }\n        }\n        const filter = {\n          filterModel: myFilterModel,\n          sortModel: params.sortModel\n        };\n        if (fields.length || params.sortModel.length) {\n          request = searchData(filter, pageNumber, DEFAULT_PAGE_SIZE);\n        } else {\n          request = getData(pageNumber, DEFAULT_PAGE_SIZE);\n        }\n        request\n          .then((page: any) => {\n            console.log('page', page);\n            const totalCount = (page.page - 1) * page.pageSize + (page.entities || []).length;\n            if (gridApi) {\n              gridApi.setInfiniteRowCount(Math.max(totalCount, page.totalEntityCount));\n            }\n            params.successCallback(page.entities || [], Math.max(totalCount, page.totalEntityCount));\n          })\n          .catch(error => {\n            console.log(error);\n            params.failCallback();\n          });\n      }\n    };\n  }\n\n  useEffect(() => {\n    if (props.columnsPath) {\n      getColumnDefs({});\n    }\n  }, [gridApi]);\n\n  return (\n    <div className=\"ag-theme-alpine\" style={{...props.style}}>\n      <AgGridReact\n        onGridReady={onGridReady}\n        rowData={props.rows}\n        columnDefs={props.columns}\n        animateRows={props.animateRows}\n        enableCellChangeFlash={props.enableCellChangeFlash}\n        enableColResize={props.enableColResize}\n        rowModelType={props.rowModelType}\n        onCellValueChanged={onCellValueChanged}/>\n    </div>\n  );\n}\n","import React, {useEffect, useRef, useState} from 'react';\nimport Chart from 'chart.js'\nimport _ from 'underscore';\n\nexport function DDChart(props) {\n\n  const [chartApi, setChartApi] = useState(null);\n\n  const ctx = useRef(null);\n\n  const destroyApi = () => {\n    if (chartApi) {\n      chartApi.destroy();\n    }\n  }\n\n  const getLabels = (data, labelKey) => {\n    if (typeof props.getLabels === 'function') {\n      return props.getLabels(data)\n    } else if (Array.isArray(props.getLabels)) {\n      return props.getLabels;\n    }\n    let groupedData = _.groupBy(data, labelKey);\n    return Object.keys(groupedData);\n  }\n\n  /**\n   * if the input value is an array compute the output with props.accumulator if its defined.\n   * @param value\n   * @returns {*} cumulated value.\n   * if the value is not an array and props.accumulator is not defined then input value is returned.\n   */\n  const accumulator = (value) => {\n    if (typeof props.accumulator === 'function') {\n      return props.accumulator(value)\n    }\n    if (Array.isArray(value)) {\n      return value.length\n    }\n    return value;\n  }\n\n  /**\n   * group by labelKey input data and output an array of accumulated value.\n   * @param data\n   * @param labelKey\n   * @param labels\n   * @returns {unknown[]|*}\n   */\n  const getData = (data, labelKey, labels) => {\n    if (typeof props.getData === 'function') {\n      return props.getData(data, labelKey)\n    } else if (Array.isArray(props.getData)) {\n      return props.getData;\n    }\n    let groupedData = _.groupBy(data, labelKey);\n    if (labels) {\n      return labels.map(label => {\n        let labelValue = groupedData[label] || [];\n        return accumulator(labelValue);\n      });\n    }\n    return Object.values(groupedData).map(accumulator);\n  }\n\n  /**\n   * Generate random colors for chart.\n   * if props.getLabelColor is defined it is called.\n   * If dataGroupKey is defined generate only one color for all labels\n   * @param labels\n   * @param dataGroupKey\n   * @returns {*}\n   */\n  const getLabelColor = (labels, dataGroupKey) => {\n    if (typeof props.getLabelColor === 'function') {\n      return props.getLabelColor(labels, dataGroupKey)\n    } else if (Array.isArray(props.getLabelColor)) {\n      return props.getLabelColor;\n    }\n    if(dataGroupKey) {\n      let color = {\n        r: Math.ceil(Math.random() * 255),\n        g: Math.ceil(Math.random() * 255),\n        b: Math.ceil(Math.random() * 255),\n        a: 0.2\n      };\n      return labels.map(label => color);\n    }\n    return labels.map(label => {\n      return {\n        r: Math.ceil(Math.random() * 255),\n        g: Math.ceil(Math.random() * 255),\n        b: Math.ceil(Math.random() * 255),\n        a: 0.2\n      };\n    });\n  }\n\n  /**\n   * Based on color generated by getLabelColor\n   * @param labelColor\n   * @returns {*}\n   */\n  const getBackgroundColor = (labelColor) => {\n    return labelColor ? labelColor.map(color => {\n      color.a = props.backgroundOpacity || 0.2;\n      return `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`;\n    }) : labelColor;\n  }\n\n  /**\n   * Based on color generated by getLabelColor set border opacity\n   * @param labelColor\n   * @returns {*}\n   */\n  const getBorderColor = (labelColor) => {\n    return labelColor ? labelColor.map(color => {\n      color.a = props.borderOpacity || 1;\n      return `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`;\n    }) : labelColor;\n  }\n\n  const initChart = () => {\n    let options = Object.assign({\n      scales: {\n        yAxes: [{\n          ticks: {\n            beginAtZero: true\n          }\n        }]\n      }\n    }, props.options || {});\n\n    let labelKey = Array.isArray(props.labelKey) ? props.labelKey : [props.labelKey];\n    let initialData = props.data;\n    let labelKeyValue = labelKey[0];\n    let labels = getLabels(initialData, labelKeyValue); // ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange']\n    let datasets = [];\n\n    let getDataset = (dataGroup, dataGroupKey, labelColor) => {\n      let data = getData(dataGroup, labelKeyValue, labels); // [12, 19, 3, 5, 2, 3]\n      let backgroundColor = getBackgroundColor(labelColor);\n      let borderColor = getBorderColor(labelColor);\n      let dataset = {\n        label: `${labelKey[1] && typeof labelKey[1] === 'string' ? (labelKey[1] + ' / ') : ''}${typeof dataGroupKey === 'string' ? dataGroupKey : '#'}`,\n        data: data,\n        borderWidth: props.borderWidth || 1\n      };\n      if (backgroundColor) {\n        dataset.backgroundColor = backgroundColor;\n      }\n      if (borderColor) {\n        dataset.borderColor = borderColor;\n      }\n      return dataset;\n    }\n\n    if (labelKey.length === 1) {\n      let labelColor = getLabelColor(labels);\n      let dataset = getDataset(initialData, labelKeyValue, labelColor);\n      datasets.push(dataset);\n    } else {\n      let groupName = labelKey[1];\n      let dataByGroupName = _.groupBy(initialData, groupName);\n      let groupLabels = Object.keys(dataByGroupName);\n      datasets = groupLabels.map(dataGroupKey => {\n        let labelColor = getLabelColor(labels, dataGroupKey);\n        return getDataset(dataByGroupName[dataGroupKey], dataGroupKey, labelColor);\n      });\n    }\n    console.log('--- datasets --- ', datasets);\n    const chart = new Chart(ctx.current, {\n      type: props.type || 'bar',\n      data: {\n        labels: labels,\n        datasets: datasets\n      },\n      options: options\n    });\n    setChartApi(chart);\n    return destroyApi;\n  }\n\n  useEffect(initChart, [props.data]);\n\n  return <canvas ref={ctx} height={props.height} width={props.width}/>\n}\n","import React from 'react'\n\nimport styles from './styles.module.css'\n\nexport const ExampleComponent = ({text}) => {\n  return <div className={styles.test}>Example Component: {text}</div>\n}\n\nexport {\n  DDAlert,\n  sendAlert,\n  sendErrorAlert,\n  sendSuccessAlert,\n  sendInfoAlert,\n  sendWarningAlert\n} from './alert';\n\nexport {\n  DDDataGrid\n} from './data-grid';\n\nexport {\n  DDChart\n} from './chart';\n","import React, {useEffect, useState} from 'react'\n\nimport {DDAlert, DDChart, DDDataGrid, ExampleComponent, sendInfoAlert, sendSuccessAlert} from '@djammadev/react-lib'\nimport {Button, Checkbox, Container} from '@material-ui/core'\nimport {createMuiTheme, makeStyles, ThemeProvider} from '@material-ui/core/styles';\nimport {blue, green} from '@material-ui/core/colors';\nimport * as moment from 'moment';\nimport '@djammadev/react-lib/dist/index.css'\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst App = () => {\n\n  const columns = [\n    {field: 'col1', headerName: 'Column 1', width: 250},\n    {field: 'col2', headerName: 'Column 2', width: 150, resizable: true},\n  ];\n\n  const rows = [\n    {id: 1, col1: 'Hello', col2: 'World'},\n    {id: 2, col1: 'XGrid', col2: 'is Awesome'},\n    {id: 3, col1: 'Material-UI', col2: 'is Amazing'},\n  ];\n\n  const [data, setData] = useState([]);\n\n  const [autoLoad, setAutoLoad] = useState(true)\n  const [dataFromParent, setDataFromParent] = useState(true)\n  const [autoChart, setAutoChart] = useState(true)\n  const [chartWithData, setChartWithData] = useState(true)\n\n  const onGridReady = (params) => {\n    params.api.setRowData(rows)\n    params.api.setColumnDefs(columns);\n  }\n\n  useEffect(() => {\n    sendInfoAlert({\n      title: 'This is an info',\n      message: \"I'm the best for ever...\",\n      timeout: 1000\n    });\n    fetch('/users.json')\n      .then(res => res.json())\n      .then(response => setData(response.entities))\n  }, []);\n\n  const columnMapper = (column) => {\n    let mapping = {\n      \"String\": \"text\",\n      \"Integer\": \"number\",\n      \"Short\": \"number\",\n      \"Long\": \"number\",\n      \"Double\": \"number\",\n      \"Date\": \"date\",\n      \"List\": \"array\"\n    }\n    let myColumn = Object.assign({}, column);\n    myColumn.type = mapping[myColumn.type] || myColumn.type;\n    return myColumn;\n  }\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: green,\n      secondary: blue,\n    },\n  });\n\n  const getLabels = (data) => {\n    return ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'];\n  }\n\n  const getData = (data) => {\n    return [12, 19, 3, 5, 2, 3];\n  }\n\n  const getLabelColor = (data) => {\n    return [\n      {r: 255, g: 99, b: 132, a: 0.2},\n      {r: 54, g: 162, b: 235, a: 0.2},\n      {r: 255, g: 206, b: 86, a: 0.2},\n      {r: 75, g: 192, b: 192, a: 0.2},\n      {r: 153, g: 102, b: 255, a: 0.2},\n      {r: 255, g: 159, b: 64, a: 0.2}\n    ]\n  }\n\n  const classes = useStyles();\n\n  return <Container>\n    <DDAlert show={true}/>\n\n    <ExampleComponent text=\"Djamma Dev React Library Example 😄\"/>\n\n    <ThemeProvider theme={theme}>\n      <Button variant=\"contained\" color=\"secondary\" className={classes.margin} onClick={(e) => {\n        console.log('----');\n        sendInfoAlert({\n          title: 'This is an info notification',\n          message: \"I'm the best for ever...\",\n          timeout: 5000\n        });\n      }}>Alert Info</Button>\n    </ThemeProvider>\n    <ThemeProvider theme={theme}>\n      <Button variant=\"contained\" color=\"primary\" className={classes.margin} onClick={(e) => {\n        console.log('----');\n        sendSuccessAlert({\n          title: 'This is a success notification',\n          message: \"I'm the best for ever...\",\n          timeout: 5000\n        });\n      }}>Alert Success</Button>\n    </ThemeProvider>\n\n    <h2>\n      Auto load data\n      <Checkbox\n        checked={autoLoad}\n        value={autoLoad}\n        onChange={(e) => setAutoLoad(e.target.checked)}/>\n    </h2>\n    {\n      autoLoad &&\n      <DDDataGrid\n        rowModelType={\"infinite\"}\n        columnsPath={\"descriptions/user.json\"}\n        dataPath={\"users.json\"}\n        columns={columns}\n        rows={rows}\n        columnMapper={columnMapper}\n        style={{height: 300, width: '100%', marginBottom: 20}}/>}\n\n    <h2>\n      Passing data from parent\n      <Checkbox\n        checked={dataFromParent}\n        value={dataFromParent}\n        onChange={(e) => setDataFromParent(e.target.checked)}/>\n    </h2>\n    {\n      dataFromParent &&\n      <DDDataGrid\n        onGridReady={onGridReady}\n        columns={columns}\n        rows={rows}\n        style={{height: 300, width: '100%', marginBottom: 20}}/>\n    }\n\n    <h2>\n      Chart Js\n      <Checkbox\n        checked={autoChart}\n        value={autoChart}\n        onChange={(e) => setAutoChart(e.target.checked)}/>\n    </h2>\n    {\n      autoChart &&\n      <DDChart\n        labelKey={\"votes\"}\n        getLabels={getLabels}\n        getData={getData}\n        getLabelColor={getLabelColor}\n        height={100}\n        width={400}/>\n    }\n\n    <h2>\n      Chart With Data\n      <Checkbox\n        checked={chartWithData}\n        value={chartWithData}\n        onChange={(e) => setChartWithData(e.target.checked)}/>\n    </h2>\n    {\n      chartWithData &&\n      <DDChart type={\"bar\"}\n               labelKey={[(item) => moment(item.createDate).format('YYYY-MM-DD') || 'Unknown', (item) => item.gender === 'MALE' ? 'Male' : 'Female']}\n               backgroundOpacity={0.4}\n               borderOpacity={1}\n               borderWidth={1}\n               data={data}\n               height={200}\n               width={400}/>\n    }\n  </Container>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}