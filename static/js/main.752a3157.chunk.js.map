{"version":3,"sources":["../../src/alert/index.js","../../src/data-grid/index.js","../../src/chart/index.js","../../src/sign-in/index.js","../../src/index.js","App.js","index.js"],"names":["useStyles","makeStyles","root","width","marginTop","theme","DDAlert","props","classes","useState","alert","setAlert","title","setTitle","message","setMessage","show","setShow","componentWillUnmount","$alert","document","getId","handleAlert","event","detail","setTimeout","useEffect","id","className","styles","severity","dangerouslySetInnerHTML","__html","sendAlert","CustomEvent","sendErrorAlert","type","timeout","sendInfoAlert","DDDataGrid","gridApi","setGridApi","upsertItem","item","value","field","method","fetch","headers","body","JSON","res","response","force","rowNodes","error","getSchemes","result","scheme","key","formatter","myKey","Array","data","getQueryParams","params","query","param","searchData","filter","pageNumber","pageSize","url","config","search","getDatasource","getRows","fields","myFilterModel","Object","filterModel","sortModel","page","perPage","getData","request","console","totalCount","Math","Error","columns","getColumnDefs","style","onGridReady","rowData","columnDefs","animateRows","enableCellChangeFlash","enableColResize","rowModelType","onCellValueChanged","DDChart","chartApi","setChartApi","ctx","useRef","destroyApi","accumulator","getLabelColor","labels","dataGroupKey","color","r","g","b","a","label","options","scales","yAxes","ticks","beginAtZero","onClick","context","onHover","e","labelKey","initialData","labelKeyValue","groupedData","_","getLabels","datasets","getDataset","dataGroup","labelColor","labelValue","backgroundColor","getBackgroundColor","borderColor","getBorderColor","dataset","borderWidth","groupName","dataByGroupName","chart","ref","height","Copyright","variant","align","href","copyrightLink","Date","paper","display","flexDirection","alignItems","avatar","margin","main","form","submit","DDSignIn","uname","pword","me","username","setUsername","password","setPassword","rememberMe","setRememberMe","component","maxWidth","src","alt","noValidate","onSubmit","required","fullWidth","name","autoComplete","autoFocus","onChange","control","checked","container","xs","mt","copyrightTitle","ExampleComponent","text","spacing","App","headerName","resizable","rows","col1","col2","setData","autoLoad","setAutoLoad","dataFromParent","setDataFromParent","autoChart","setAutoChart","chartWithData","setChartWithData","showSignIn","setShowSignIn","then","json","entities","createMuiTheme","palette","primary","green","secondary","blue","getDatasetLabel","gender","getLabel","moment","createDate","format","Container","ThemeProvider","Button","log","Checkbox","target","columnsPath","dataPath","columnMapper","column","myColumn","assign","marginBottom","api","setRowData","setColumnDefs","backgroundOpacity","borderOpacity","responsive","plugins","animation","duration","easing","tooltips","callbacks","values","map","elem","datasetLabel","_model","clickedData","reduce","prev","curr","authLink","onSuccess","onError","stringify","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.752a3157.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Alert, AlertTitle} from '@material-ui/lab'\n\nimport styles from './index.css'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nconst DD_ALERT_EVENT = 'dd-alert-event';\n\nexport function DDAlert(props) {\n  const classes = useStyles();\n  const [alert, setAlert] = useState('info');\n  const [title, setTitle] = useState('');\n  const [message, setMessage] = useState('');\n  const [show, setShow] = useState(props.show);\n\n  const componentWillUnmount = () => {\n    let $alert = document.getElementById(getId());\n    if ($alert) {\n      $alert.removeEventListener(DD_ALERT_EVENT);\n    }\n  }\n\n  const componentDidMount = () => {\n    let $alert = document.getElementById(getId());\n    if ($alert) {\n      $alert.addEventListener(DD_ALERT_EVENT, handleAlert);\n      $alert.addEventListener('click', () => setShow(false));\n    }\n    return componentWillUnmount;\n  }\n\n  const handleAlert = (event) => {\n    let detail = event.detail;\n    setAlert(detail.alert);\n    setTitle(detail.title);\n    setMessage(detail.message);\n    setShow(true);\n    if (detail.timeout > 0) {\n      setTimeout(() => {\n        setShow(false);\n      }, detail.timeout);\n    }\n  }\n\n  const getId = () => {\n    return props.id || 'DDAlert'\n  }\n\n  useEffect(componentDidMount, []);\n\n  return (\n    <div id={getId()} className={styles.Alert + (show ? '' : ' ' + styles.hide)}>\n      <div className={classes.root}>\n        <Alert severity={alert}>\n          <AlertTitle>{title}</AlertTitle>\n          <div dangerouslySetInnerHTML={{__html: message}}/>\n        </Alert>\n      </div>\n    </div>\n  );\n}\n\nexport function sendAlert(event) {\n  let $alert = document.getElementById(event.id || 'DDAlert');\n  if ($alert) {\n    $alert.dispatchEvent(new CustomEvent(event.type, {detail: event}));\n  }\n}\n\nexport function sendErrorAlert(event) {\n  sendAlert({id: event.id, type: DD_ALERT_EVENT, alert: 'error', title: event.title, message: event.message, timeout: event.timeout})\n}\n\nexport function sendSuccessAlert(event) {\n  sendAlert({id: event.id, type: DD_ALERT_EVENT, alert: 'success', title: event.title, message: event.message, timeout: event.timeout})\n}\n\nexport function sendInfoAlert(event) {\n  sendAlert({id: event.id, type: DD_ALERT_EVENT, alert: 'info', title: event.title, message: event.message, timeout: event.timeout})\n}\n\nexport function sendWarningAlert(event) {\n  sendAlert({id: event.id, type: DD_ALERT_EVENT, alert: 'warning', title: event.title, message: event.message, timeout: event.timeout})\n}\n","import React, {useEffect, useState} from 'react';\nimport {AgGridReact} from 'ag-grid-react';\n\nimport {sendErrorAlert} from '../alert'\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\n// import styles from './index.css'\n\nconst DEFAULT_PAGE_SIZE = 100;\n\nexport function DDDataGrid({className, ...props}) {\n\n  const [gridApi, setGridApi] = useState(null);\n\n  /**\n   * If props.onGridReady is defined all agGrid management is delegated to the parent component.\n   * @param params\n   */\n  const onGridReady = (params) => {\n    setGridApi(params.api);\n\n    if (props.onGridReady) {\n      props.onGridReady(params);\n    }\n    if (params.api && props.dataPath) {\n      params.api.setDatasource(getDatasource());\n    }\n  }\n\n  /**\n   * Send event to the parent component if props.onCellValueChanged is defined.\n   * @param event\n   */\n  const onCellValueChanged = (event) => {\n    if (props.onCellValueChanged) {\n      props.onCellValueChanged(event);\n    } else {\n      upsertItem(event);\n    }\n  }\n\n  /**\n   * it props.dataPath is defined upsert item selected.\n   * @param event\n   */\n  const upsertItem = (event) => {\n    if (!props.dataPath) {\n      return;\n    }\n    let item = {\n      id: event.data.id\n    };\n    let value = event.value;\n    let field = event.colDef.field;\n    item[field] = value;\n    if (event.colDef.type === 'object') {\n      item[field] = {id: value * 1};\n    }\n    let method = 'PUT';\n    if (item.id === null) {\n      item = event.data;\n      method = 'POST';\n    }\n    fetch(props.dataPath, {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(item)\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.code && response.code / 100 !== 2) {\n          sendErrorAlert({\n            title: event.colDef.headerName,\n            message: response.message\n          });\n        } else {\n          event.node.setData(response);\n          event.api.refreshCells({force: true, rowNodes: [event.node]});\n        }\n      })\n      .catch(error => {\n        sendErrorAlert({\n          title: event.colDef.headerName,\n          message: error.message || 'Error on update'\n        });\n      });\n  }\n\n  /**\n   * Convert {schemes: []} into schemes list by adding default formatter function.\n   * If props.columnMapper is defined it is called at the end to update colDef value.\n   * @param result\n   * @returns {*[]}\n   */\n  const getSchemes = (result) => {\n    let myFormatter = (key) => {\n      return (data) => {\n        if (!data) {\n          return ''\n        }\n        let myKey = key;\n        if (Array.isArray(data[myKey])) {\n          return `${data[myKey].length} element${data[myKey].length > 1 ? 's' : ''}`\n        }\n        if (data[myKey] && typeof data[myKey] === 'object') {\n          return data[myKey].id\n        }\n        return data[myKey];\n      };\n    };\n    let myMapper = scheme => {\n      let formatter = myFormatter(scheme.field);\n      let cellRenderer = (data) => {\n        return formatter(data.data);\n      }\n      scheme.formatter = formatter;\n      scheme.cellRenderer = cellRenderer;\n      return props.columnMapper ? props.columnMapper(scheme) : scheme;\n    };\n    return (result.schemes || []).map(myMapper);\n  }\n\n  /**\n   * Retrieve columns definition using props.columnsPath.\n   * This action is triggered when gridApi is defined and props.columnsPath.\n   */\n  const getColumnDefs = () => {\n    if (!gridApi) {\n      return;\n    }\n    let url = `${props.columnsPath}${getQueryParams()}`;\n    fetch(url, {headers: {'Accept': 'application/json'}})\n      .then(res => {\n        console.log(res);\n        return res.json()\n      })\n      .then(result => {\n        console.log('result', result);\n        if (result.code && result.code / 100 !== 2) {\n          throw Error(result.message);\n        } else {\n          let columns = getSchemes(result);\n          console.log('columns', columns);\n          if (gridApi) {\n            gridApi.setColumnDefs(columns);\n          }\n        }\n      })\n      .catch(error => {\n        console.log('error', error);\n      });\n  }\n\n  /**\n   * Convert { [param: string]: string; } into queryParams: url-encoded\n   * @param params\n   * @returns {string}\n   */\n  const getQueryParams = (params?: { [param: string]: string; }) => {\n    let query = '';\n    if (params) {\n      for (const param in params) {\n        if (query === '') {\n          query = `${param}=${params[param]}`;\n        } else {\n          query = query + `&${param}=${params[param]}`;\n        }\n      }\n    }\n    return (query !== '' ? '?' : '') + query;\n  }\n\n  /**\n   * Search using ag-grid filter model.\n   * @param body : AdGrid Filter Data Model\n   * @param params : Query Params\n   * @returns {Promise<T>}\n   */\n  const search = (body: any | null, params?: { [param: string]: string; }) => {\n    let url = `${props.dataSearchPath || props.dataPath}`;\n    let method = 'POST';\n    if (params) {\n      let query = getQueryParams(params)\n      url = `${url}${query}`;\n    }\n    if (!props.dataSearchPath) {\n      method = 'GET'\n    }\n    let config = {\n      method: method\n    }\n    if (method === 'POST') {\n      config.body = JSON.stringify(body);\n      config.headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    }\n    return fetch(url, config).then(res => res.json());\n  }\n\n  /**\n   * @see search\n   * @param filter\n   * @param pageNumber\n   * @param pageSize\n   * @returns {Promise<T>}\n   */\n  const searchData = (filter: any, pageNumber: number = -1, pageSize: number = -1) => {\n    let params = {};\n    params['page'] = `${pageNumber}`;\n    params['perPage'] = `${pageSize}`;\n    return search(filter, {...params, ...(props.params || {})});\n  }\n\n  /**\n   * called from getDatasource.\n   * @param pageNumber\n   * @param pageSize\n   * @returns {Promise<T>}\n   */\n  const getData = (pageNumber: number = -1, pageSize: number = -1) => {\n    let url = `${props.dataPath}${getQueryParams({page: pageNumber, perPage: pageSize, ...(props.params || {})})}`;\n    return fetch(url, {headers: {'Accept': 'application/json'}}).then(res => res.json())\n  }\n\n  /**\n   * AgGrid DataSource\n   * @returns {{getRows: IDatasource.getRows}}\n   */\n  const getDatasource = () => {\n    return {\n      getRows: (params) => {\n        const pageNumber = params.endRow / DEFAULT_PAGE_SIZE;\n        let request;\n        const fields = [];\n        let myFilterModel = params.filterModel;\n        if (props.filterModel) {\n          myFilterModel = Object.assign({}, myFilterModel, props.filterModel);\n        }\n        for (const field in myFilterModel) {\n          if (myFilterModel.hasOwnProperty(field)) {\n            fields.push(field);\n          }\n        }\n        const filter = {\n          filterModel: myFilterModel,\n          sortModel: params.sortModel\n        };\n        if (fields.length || params.sortModel.length) {\n          request = searchData(filter, pageNumber, DEFAULT_PAGE_SIZE);\n        } else {\n          request = getData(pageNumber, DEFAULT_PAGE_SIZE);\n        }\n        request\n          .then((page: any) => {\n            console.log('page', page);\n            const totalCount = (page.page - 1) * page.pageSize + (page.entities || []).length;\n            if (gridApi) {\n              gridApi.setInfiniteRowCount(Math.max(totalCount, page.totalEntityCount));\n            }\n            params.successCallback(page.entities || [], Math.max(totalCount, page.totalEntityCount));\n          })\n          .catch(error => {\n            console.log(error);\n            params.failCallback();\n          });\n      }\n    };\n  }\n\n  useEffect(() => {\n    if (props.columnsPath) {\n      getColumnDefs({});\n    }\n  }, [gridApi]);\n\n  return (\n    <div className={className || \"ag-theme-alpine\"} style={{...props.style}}>\n      <AgGridReact\n        onGridReady={onGridReady}\n        rowData={props.rows}\n        columnDefs={props.columns}\n        animateRows={props.animateRows}\n        enableCellChangeFlash={props.enableCellChangeFlash}\n        enableColResize={props.enableColResize}\n        rowModelType={props.rowModelType}\n        onCellValueChanged={onCellValueChanged}/>\n    </div>\n  );\n}\n","import React, {useEffect, useRef, useState} from 'react';\nimport Chart from 'chart.js'\nimport _ from 'underscore';\n\nexport function DDChart(props) {\n  console.log('----DDChart----');\n  const [chartApi, setChartApi] = useState(null);\n\n  const ctx = useRef(null);\n\n  const destroyApi = () => {\n    console.log('-----destroyApi-----');\n    if (chartApi) {\n      chartApi.destroy();\n    }\n  }\n\n  const getLabels = (data, labelKey) => {\n    if (typeof props.getLabels === 'function') {\n      return props.getLabels(data)\n    } else if (Array.isArray(props.getLabels)) {\n      return props.getLabels;\n    }\n    let groupedData = _.groupBy(data, labelKey);\n    return Object.keys(groupedData);\n  }\n\n  /**\n   * if the input value is an array compute the output with props.accumulator if its defined.\n   * @param value\n   * @returns {*} cumulated value.\n   * if the value is not an array and props.accumulator is not defined then input value is returned.\n   */\n  const accumulator = (value) => {\n    if (typeof props.accumulator === 'function') {\n      return props.accumulator(value)\n    }\n    if (Array.isArray(value)) {\n      return value.length\n    }\n    return value;\n  }\n\n  /**\n   * group by labelKey input data and output an array of accumulated value.\n   * @param data\n   * @param labelKey\n   * @param labels\n   * @returns {unknown[]|*}\n   */\n  const getData = (data, labelKey, labels) => {\n    if (typeof props.getData === 'function') {\n      return props.getData(data, labelKey)\n    } else if (Array.isArray(props.getData)) {\n      return props.getData;\n    }\n    let groupedData = _.groupBy(data, labelKey);\n    if (labels) {\n      return labels.map(label => {\n        let labelValue = groupedData[label] || [];\n        return accumulator(labelValue);\n      });\n    }\n    return Object.values(groupedData).map(accumulator);\n  }\n\n  /**\n   * Generate random colors for chart.\n   * if props.getLabelColor is defined it is called.\n   * If dataGroupKey is defined generate only one color for all labels\n   * @param labels\n   * @param dataGroupKey\n   * @returns {*}\n   */\n  const getLabelColor = (labels, dataGroupKey) => {\n    if (typeof props.getLabelColor === 'function') {\n      return props.getLabelColor(labels, dataGroupKey)\n    } else if (Array.isArray(props.getLabelColor)) {\n      return props.getLabelColor;\n    }\n    if(dataGroupKey) {\n      let color = {\n        r: Math.ceil(Math.random() * 255),\n        g: Math.ceil(Math.random() * 255),\n        b: Math.ceil(Math.random() * 255),\n        a: 0.2\n      };\n      return labels.map(label => color);\n    }\n    return labels.map(label => {\n      return {\n        r: Math.ceil(Math.random() * 255),\n        g: Math.ceil(Math.random() * 255),\n        b: Math.ceil(Math.random() * 255),\n        a: 0.2\n      };\n    });\n  }\n\n  /**\n   * Based on color generated by getLabelColor\n   * @param labelColor\n   * @returns {*}\n   */\n  const getBackgroundColor = (labelColor) => {\n    return labelColor ? labelColor.map(color => {\n      color.a = props.backgroundOpacity || 0.2;\n      return `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`;\n    }) : labelColor;\n  }\n\n  /**\n   * Based on color generated by getLabelColor set border opacity\n   * @param labelColor\n   * @returns {*}\n   */\n  const getBorderColor = (labelColor) => {\n    return labelColor ? labelColor.map(color => {\n      color.a = props.borderOpacity || 1;\n      return `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`;\n    }) : labelColor;\n  }\n\n  const initChart = () => {\n    let options = Object.assign({\n      scales: {\n        yAxes: [{\n          ticks: {\n            beginAtZero: true\n          }\n        }]\n      },\n      onClick : (event, context) => {\n        if ((context || []).length === 0) return;\n        if (props.onClick) {\n          props.onClick(event, context);\n        }\n      },\n      onHover: function(e) {\n        e.target.style.cursor = 'pointer';\n        if(props.onHover) {\n          props.onHover(e);\n        }\n      }\n    }, props.options || {});\n    console.log('--- options --- ', options);\n    let labelKey = Array.isArray(props.labelKey) ? props.labelKey : [props.labelKey];\n    let initialData = props.data;\n    let labelKeyValue = labelKey[0];\n    let labels = getLabels(initialData, labelKeyValue); // ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange']\n    let datasets = [];\n\n    let getDataset = (dataGroup, dataGroupKey, labelColor) => {\n      let data = getData(dataGroup, labelKeyValue, labels); // [12, 19, 3, 5, 2, 3]\n      let backgroundColor = getBackgroundColor(labelColor);\n      let borderColor = getBorderColor(labelColor);\n      let dataset = {\n        label: `${labelKey[1] && typeof labelKey[1] === 'string' ? (labelKey[1] + ' / ') : ''}${typeof dataGroupKey === 'string' ? dataGroupKey : '#'}`,\n        data: data,\n        borderWidth: props.borderWidth || 1\n      };\n      if (backgroundColor) {\n        dataset.backgroundColor = backgroundColor;\n      }\n      if (borderColor) {\n        dataset.borderColor = borderColor;\n      }\n      return dataset;\n    }\n\n    if (labelKey.length === 1) {\n      let labelColor = getLabelColor(labels);\n      let dataset = getDataset(initialData, labelKeyValue, labelColor);\n      datasets.push(dataset);\n    } else {\n      let groupName = labelKey[1];\n      let dataByGroupName = _.groupBy(initialData, groupName);\n      let groupLabels = Object.keys(dataByGroupName);\n      datasets = groupLabels.map(dataGroupKey => {\n        let labelColor = getLabelColor(labels, dataGroupKey);\n        return getDataset(dataByGroupName[dataGroupKey], dataGroupKey, labelColor);\n      });\n    }\n    console.log('--- datasets --- ', datasets);\n    const chart = new Chart(ctx.current, {\n      type: props.type || 'bar',\n      data: {\n        labels: labels,\n        datasets: datasets\n      },\n      options: options\n    });\n    setChartApi(chart);\n    if (props.onChartReaddy) {\n      props.onChartReaddy(chart);\n    }\n    return destroyApi;\n  }\n\n  useEffect(initChart, [props.data]);\n\n  return <canvas ref={ctx} height={props.height} width={props.width}/>\n}\n","import React, {useState} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport {DDAlert, sendErrorAlert} from \"../alert\";\n\nfunction Copyright(props) {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href={props.copyrightLink}>\n        {props.copyrightTitle}\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport function DDSignIn(props) {\n\n  let uname = props.username || '';\n  let pword = props.password || '';\n  let me = props.rememberMe || false;\n\n  const [username, setUsername] = useState(uname);\n  const [password, setPassword] = useState(pword)\n  const [rememberMe, setRememberMe] = useState(me);\n\n  const classes = useStyles();\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    let value = {\n      [props.usernameKey || 'username']: username,\n      [props.passwordKey || 'password']: password,\n      [props.rememberMeKey || 'rememberMe']: rememberMe\n    };\n    console.log('value', value);\n    if (props.onSubmit) {\n      props.onSubmit(value);\n    }\n    if (props.authLink) {\n      let data = JSON.stringify(value);\n      fetch(props.authLink, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json', 'Accept': 'application/json'},\n        body: data\n      })\n        .then(res => res.json())\n        .then(response => {\n          if (response.code && response.code === 400) {\n            if (typeof props.onError === 'function') {\n              props.onError(response);\n            } else {\n              sendErrorAlert({title: \"Login Error\", message: response.message});\n            }\n          } else {\n            if (typeof props.onSuccess === 'function') {\n              props.onSuccess(response);\n            } else {\n              sendErrorAlert({title: \"Login Error\", message: response.message})\n            }\n            console.log('--- response --- ', response);\n          }\n        })\n        .catch(error => {\n          if (typeof props.onError === 'function') {\n            props.onError(error);\n          } else {\n            sendErrorAlert({title: \"Login Error\", message: error.message || JSON.stringify(error)})\n          }\n        });\n    }\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline/>\n      <div className={classes.paper}>\n        {props.avatar &&\n        <Avatar className={classes.avatar} src={props.avatar} alt={'Logo'}/>\n        }\n        {!props.avatar &&\n        <Avatar className={classes.avatar} src={props.avatar} alt={'Logo'}>\n          <LockOutlinedIcon/>\n        </Avatar>}\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className={classes.form} noValidate onSubmit={onSubmit}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Username\"\n            name=\"username\"\n            autoComplete=\"email\"\n            autoFocus\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <FormControlLabel\n            control={\n              <Checkbox color=\"primary\"\n                        checked={rememberMe}\n                        value={rememberMe}\n                        onChange={(e) => setRememberMe(e.target.checked)}/>\n            }\n            label=\"Remember me\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item xs>\n              <Link href={props.forgotLink ? props.forgotLink : '#'} variant=\"body2\">\n                Forgot password?\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link href={props.signUpLink ? props.signUpLink : '#'} variant=\"body2\">\n                {\"Don't have an account? Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={8}>\n        <Copyright copyrightLink={props.copyrightLink} copyrightTitle={props.copyrightTitle}/>\n      </Box>\n    </Container>\n  );\n}\n","import React from 'react'\n\nimport styles from './styles.module.css'\n\nexport const ExampleComponent = ({text}) => {\n  return <div className={styles.test}>Example Component: {text}</div>\n}\n\nexport {\n  DDAlert,\n  sendAlert,\n  sendErrorAlert,\n  sendSuccessAlert,\n  sendInfoAlert,\n  sendWarningAlert\n} from './alert';\n\nexport {\n  DDDataGrid\n} from './data-grid';\n\nexport {\n  DDChart\n} from './chart';\n\nexport {\n  DDSignIn\n} from './sign-in';\n","import React, {useEffect, useState} from 'react'\n\nimport {\n  DDAlert,\n  DDChart,\n  DDDataGrid,\n  DDSignIn,\n  ExampleComponent,\n  sendInfoAlert,\n  sendSuccessAlert,\n  sendErrorAlert\n} from '@djammadev/react-lib'\nimport {Button, Checkbox, Container} from '@material-ui/core'\nimport {createMuiTheme, makeStyles, ThemeProvider} from '@material-ui/core/styles';\nimport {blue, green} from '@material-ui/core/colors';\nimport * as moment from 'moment';\nimport '@djammadev/react-lib/dist/index.css'\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst App = () => {\n\n  const columns = [\n    {field: 'col1', headerName: 'Column 1', width: 250},\n    {field: 'col2', headerName: 'Column 2', width: 150, resizable: true},\n  ];\n\n  const rows = [\n    {id: 1, col1: 'Hello', col2: 'World'},\n    {id: 2, col1: 'XGrid', col2: 'is Awesome'},\n    {id: 3, col1: 'Material-UI', col2: 'is Amazing'},\n  ];\n\n  const options = {\n    responsive: true,\n    plugins: {},\n    animation: {\n      duration: 2000,\n      easing: 'easeOutQuart'\n    },\n    tooltips: {\n      callbacks: {}\n    }\n  }\n\n  const [data, setData] = useState([]);\n\n  const [autoLoad, setAutoLoad] = useState(true)\n  const [dataFromParent, setDataFromParent] = useState(true)\n  const [autoChart, setAutoChart] = useState(false)\n  const [chartWithData, setChartWithData] = useState(true)\n  const [showSignIn, setShowSignIn] = useState(false)\n\n  const onGridReady = (params) => {\n    params.api.setRowData(rows)\n    params.api.setColumnDefs(columns);\n  }\n\n  useEffect(() => {\n    sendInfoAlert({\n      title: 'This is an info',\n      message: \"I'm the best for ever...\",\n      timeout: 1000\n    });\n    fetch('/users.json')\n      .then(res => res.json())\n      .then(response => setData(response.entities))\n  }, []);\n\n  const columnMapper = (column) => {\n    let mapping = {\n      \"String\": \"text\",\n      \"Integer\": \"number\",\n      \"Short\": \"number\",\n      \"Long\": \"number\",\n      \"Double\": \"number\",\n      \"Date\": \"date\",\n      \"List\": \"array\"\n    }\n    let myColumn = Object.assign({}, column);\n    myColumn.type = mapping[myColumn.type] || myColumn.type;\n    return myColumn;\n  }\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: green,\n      secondary: blue,\n    },\n  });\n\n  const getLabels = (data) => {\n    return ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'];\n  }\n\n  const getData = (data) => {\n    return [12, 19, 3, 5, 2, 3];\n  }\n\n  const getLabelColor = (data) => {\n    return [\n      {r: 255, g: 99, b: 132, a: 0.2},\n      {r: 54, g: 162, b: 235, a: 0.2},\n      {r: 255, g: 206, b: 86, a: 0.2},\n      {r: 75, g: 192, b: 192, a: 0.2},\n      {r: 153, g: 102, b: 255, a: 0.2},\n      {r: 255, g: 159, b: 64, a: 0.2}\n    ]\n  }\n\n  const getDatasetLabel = (item) => {\n    return item.gender === 'MALE' ? 'Male' : 'Female';\n  }\n\n  const getLabel = (item) => {\n    return moment(item.createDate).format('YYYY-MM-DD') || 'Unknown';\n  }\n\n  const classes = useStyles();\n\n  return <Container>\n    <DDAlert show={true}/>\n\n    <ExampleComponent text=\"Djamma Dev React Library Example 😄\"/>\n\n    <ThemeProvider theme={theme}>\n      <Button variant=\"contained\" color=\"secondary\" className={classes.margin} onClick={(e) => {\n        console.log('----');\n        sendInfoAlert({\n          title: 'This is an info notification',\n          message: \"I'm the best for ever...\",\n          timeout: 5000\n        });\n      }}>Alert Info</Button>\n    </ThemeProvider>\n    <ThemeProvider theme={theme}>\n      <Button variant=\"contained\" color=\"primary\" className={classes.margin} onClick={(e) => {\n        console.log('----');\n        sendSuccessAlert({\n          title: 'This is a success notification',\n          message: \"I'm the best for ever...\",\n          timeout: 5000\n        });\n      }}>Alert Success</Button>\n    </ThemeProvider>\n\n    <h2>\n      Auto load data\n      <Checkbox\n        checked={autoLoad}\n        value={autoLoad}\n        onChange={(e) => setAutoLoad(e.target.checked)}/>\n    </h2>\n    {\n      autoLoad &&\n      <DDDataGrid\n        rowModelType={\"infinite\"}\n        columnsPath={\"descriptions/user.json\"}\n        dataPath={\"users.json\"}\n        columns={columns}\n        rows={rows}\n        columnMapper={columnMapper}\n        style={{height: 300, width: '100%', marginBottom: 20}}/>}\n\n    <h2>\n      Passing data from parent\n      <Checkbox\n        checked={dataFromParent}\n        value={dataFromParent}\n        onChange={(e) => setDataFromParent(e.target.checked)}/>\n    </h2>\n    {\n      dataFromParent &&\n      <DDDataGrid\n        onGridReady={onGridReady}\n        columns={columns}\n        rows={rows}\n        style={{height: 300, width: '100%', marginBottom: 20}}/>\n    }\n\n    <h2>\n      Chart Js\n      <Checkbox\n        checked={autoChart}\n        value={autoChart}\n        onChange={(e) => setAutoChart(e.target.checked)}/>\n    </h2>\n    {\n      autoChart &&\n      <DDChart\n        labelKey={\"votes\"}\n        getLabels={getLabels}\n        getData={getData}\n        getLabelColor={getLabelColor}\n        height={100}\n        width={400}/>\n    }\n\n    <h2>\n      Chart With Data\n      <Checkbox\n        checked={chartWithData}\n        value={chartWithData}\n        onChange={(e) => setChartWithData(e.target.checked)}/>\n    </h2>\n    {\n      chartWithData &&\n      <DDChart type={\"bar\"}\n               labelKey={[getLabel, getDatasetLabel]}\n               backgroundOpacity={0.4}\n               borderOpacity={1}\n               borderWidth={1}\n               data={data}\n               options={options}\n               onClick={(event, context) => {\n                 let values = (context || []).map(elem => {\n                   return {datasetLabel: elem._model.datasetLabel, label: elem._model.label};\n                 });\n                 console.log(event, context, values);\n                 let clickedData = data.filter(item => {\n                   return values.reduce((prev, curr) => {\n                     return prev || (curr.datasetLabel === getDatasetLabel(item) && curr.label === getLabel(item));\n                   }, false);\n                 });\n                 console.log('clickedData', clickedData);\n               }}\n               height={200}\n               width={400}/>\n    }\n    <h2>\n      Show Sign In\n      <Checkbox\n        checked={showSignIn}\n        value={showSignIn}\n        onChange={(e) => setShowSignIn(e.target.checked)}/>\n    </h2>\n    {\n      showSignIn && <DDSignIn authLink={\"/api/auth\"} onSuccess={(e) => console.log('--- e ---', e)} onError={e => sendErrorAlert({title: \"Login Error\", message: e.message || JSON.stringify(e)})} copyrightLink={\"https://www.djammadev.com\"} copyrightTitle={\"Djamma Dev\"}/>\n    }\n  </Container>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}