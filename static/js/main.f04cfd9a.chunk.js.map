{"version":3,"sources":["../../src/alert/index.js","../../src/data-grid/index.js","../../src/chart/index.js","../../src/index.js","App.js","index.js"],"names":["useStyles","makeStyles","root","width","marginTop","theme","DDAlert","props","classes","useState","alert","setAlert","title","setTitle","message","setMessage","show","setShow","componentWillUnmount","$alert","document","handleAlert","event","detail","setTimeout","useEffect","id","className","styles","severity","dangerouslySetInnerHTML","__html","sendAlert","CustomEvent","sendErrorAlert","type","timeout","sendInfoAlert","DDDataGrid","gridApi","setGridApi","upsertItem","item","value","field","method","fetch","headers","body","JSON","res","response","force","rowNodes","error","getSchemes","result","scheme","key","formatter","myKey","Array","data","getQueryParams","params","query","param","searchData","filter","pageNumber","pageSize","url","config","search","getDatasource","getRows","fields","myFilterModel","Object","filterModel","sortModel","getData","request","console","totalCount","page","Math","Error","columns","getColumnDefs","style","onGridReady","rowData","columnDefs","animateRows","enableCellChangeFlash","enableColResize","rowModelType","onCellValueChanged","DDChart","chartApi","setChartApi","ctx","useRef","destroyApi","getLabels","labelKey","groupedData","_","labels","labelColor","label","r","g","b","a","getLabelColor","backgroundColor","color","getBackgroundColor","borderColor","getBorderColor","chart","datasets","borderWidth","options","scales","yAxes","ticks","beginAtZero","ref","height","ExampleComponent","text","margin","spacing","App","headerName","resizable","rows","col1","col2","setData","then","json","entities","createMuiTheme","palette","primary","green","secondary","blue","Container","ThemeProvider","Button","variant","onClick","e","log","columnsPath","dataPath","columnMapper","column","myColumn","assign","marginBottom","api","setRowData","setColumnDefs","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f04cfd9a.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Alert, AlertTitle} from '@material-ui/lab'\n\nimport styles from './index.css'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nconst DD_ALERT_EVENT = 'dd-alert-event';\n\nexport function DDAlert(props) {\n  const classes = useStyles();\n  const [alert, setAlert] = useState('info');\n  const [title, setTitle] = useState('');\n  const [message, setMessage] = useState('');\n  const [show, setShow] = useState(props.show);\n\n  const componentWillUnmount = () => {\n    let $alert = document.getElementById('DDAlert');\n    if ($alert) {\n      $alert.removeEventListener(DD_ALERT_EVENT);\n    }\n  }\n\n  const componentDidMount = () => {\n    let $alert = document.getElementById('DDAlert');\n    if ($alert) {\n      $alert.addEventListener(DD_ALERT_EVENT, handleAlert);\n      $alert.addEventListener('click', () => setShow(false));\n    }\n    return componentWillUnmount;\n  }\n\n  const handleAlert = (event) => {\n    let detail = event.detail;\n    setAlert(detail.alert);\n    setTitle(detail.title);\n    setMessage(detail.message);\n    setShow(true);\n    if (detail.timeout > 0) {\n      setTimeout(() => {\n        setShow(false);\n      }, detail.timeout);\n    }\n  }\n\n  useEffect(componentDidMount, []);\n\n  return (\n    <div id={'DDAlert'} className={styles.Alert + (show ? '' : ' ' + styles.hide)}>\n      <div className={classes.root}>\n        <Alert severity={alert}>\n          <AlertTitle>{title}</AlertTitle>\n          <div dangerouslySetInnerHTML={{__html: message}}/>\n        </Alert>\n      </div>\n    </div>\n  );\n}\n\nexport function sendAlert(event) {\n  let $alert = document.getElementById('DDAlert');\n  if ($alert) {\n    $alert.dispatchEvent(new CustomEvent(event.type, {detail: event}));\n  }\n}\n\nexport function sendErrorAlert(event) {\n  sendAlert({type: DD_ALERT_EVENT, alert: 'error', title: event.title, message: event.message, timeout: event.timeout})\n}\n\nexport function sendSuccessAlert(event) {\n  sendAlert({type: DD_ALERT_EVENT, alert: 'success', title: event.title, message: event.message, timeout: event.timeout})\n}\n\nexport function sendInfoAlert(event) {\n  sendAlert({type: DD_ALERT_EVENT, alert: 'info', title: event.title, message: event.message, timeout: event.timeout})\n}\n\nexport function sendWarningAlert(event) {\n  sendAlert({type: DD_ALERT_EVENT, alert: 'warning', title: event.title, message: event.message, timeout: event.timeout})\n}\n","import React, {useEffect, useState} from 'react';\nimport {AgGridReact} from 'ag-grid-react';\n\nimport {sendErrorAlert} from '../alert'\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\n// import styles from './index.css'\n\nconst DEFAULT_PAGE_SIZE = 100;\n\nexport function DDDataGrid(props) {\n\n  const [gridApi, setGridApi] = useState(null);\n\n  /**\n   * If props.onGridReady is defined all agGrid management is delegated to the parent component.\n   * @param params\n   */\n  const onGridReady = (params) => {\n    setGridApi(params.api);\n\n    if (props.onGridReady) {\n      props.onGridReady(params);\n    }\n    if (params.api && props.dataPath) {\n      params.api.setDatasource(getDatasource());\n    }\n  }\n\n  /**\n   * Send event to the parent component if props.onCellValueChanged is defined.\n   * @param event\n   */\n  const onCellValueChanged = (event) => {\n    if (props.onCellValueChanged) {\n      props.onCellValueChanged(event);\n    } else {\n      upsertItem(event);\n    }\n  }\n\n  /**\n   * it props.dataPath is defined upsert item selected.\n   * @param event\n   */\n  const upsertItem = (event) => {\n    if(!props.dataPath) {\n      return;\n    }\n    let item = {\n      id: event.data.id\n    };\n    let value = event.value;\n    let field = event.colDef.field;\n    item[field] = value;\n    if (event.colDef.type === 'object') {\n      item[field] = {id: value * 1};\n    }\n    let method = 'PUT';\n    if (item.id === null) {\n      item = event.data;\n      method = 'POST';\n    }\n    fetch(props.dataPath, {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(item)\n    })\n      .then(res => res.json())\n      .then(response => {\n        if (response.code && response.code / 100 !== 2) {\n          sendErrorAlert({\n            title: event.colDef.headerName,\n            message: response.message\n          });\n        } else {\n          event.node.setData(response);\n          event.api.refreshCells({force: true, rowNodes: [event.node]});\n        }\n      })\n      .catch(error => {\n        sendErrorAlert({\n          title: event.colDef.headerName,\n          message: error.message || 'Error on update'\n        });\n      });\n  }\n\n  /**\n   * Convert {schemes: []} into schemes list by adding default formatter function.\n   * If props.columnMapper is defined it is called at the end to update colDef value.\n   * @param result\n   * @returns {*[]}\n   */\n  const getSchemes = (result) => {\n    let myFormatter = (key) => {\n      return (data) => {\n        if (!data) {\n          return ''\n        }\n        let myKey = key;\n        if (Array.isArray(data[myKey])) {\n          return `${data[myKey].length} element${data[myKey].length > 1 ? 's' : ''}`\n        }\n        if (data[myKey] && typeof data[myKey] === 'object') {\n          return data[myKey].id\n        }\n        return data[myKey];\n      };\n    };\n    let myMapper = scheme => {\n      let formatter = myFormatter(scheme.field);\n      let cellRenderer = (data) => {\n        return formatter(data.data);\n      }\n      scheme.formatter = formatter;\n      scheme.cellRenderer = cellRenderer;\n      return props.columnMapper ? props.columnMapper(scheme) : scheme;\n    };\n    return (result.schemes || []).map(myMapper);\n  }\n\n  /**\n   * Retrieve columns definition using props.columnsPath.\n   * This action is triggered when gridApi is defined and props.columnsPath.\n   */\n  const getColumnDefs = () => {\n    if (!gridApi) {\n      return;\n    }\n    let url = `${props.columnsPath}${getQueryParams()}`;\n    fetch(url, {headers: {'Accept': 'application/json'}})\n      .then(res => {\n        console.log(res);\n        return res.json()\n      })\n      .then(result => {\n        console.log('result', result);\n        if (result.code && result.code / 100 !== 2) {\n          throw Error(result.message);\n        } else {\n          let columns = getSchemes(result);\n          console.log('columns', columns);\n          if (gridApi) {\n            gridApi.setColumnDefs(columns);\n          }\n        }\n      })\n      .catch(error => {\n        console.log('error', error);\n      });\n  }\n\n  /**\n   * Convert { [param: string]: string; } into queryParams: url-encoded\n   * @param params\n   * @returns {string}\n   */\n  const getQueryParams = (params?: { [param: string]: string; }) => {\n    let query = '';\n    if (params) {\n      for (const param in params) {\n        if (query === '') {\n          query = `${param}=${params[param]}`;\n        } else {\n          query = query + `&${param}=${params[param]}`;\n        }\n      }\n    }\n    return (query !== '' ? '?' : '') + query;\n  }\n\n  /**\n   * Search using ag-grid filter model.\n   * @param body : AdGrid Filter Data Model\n   * @param params : Query Params\n   * @returns {Promise<T>}\n   */\n  const search = (body: any | null, params?: { [param: string]: string; }) => {\n    let url = `${props.dataSearchPath || props.dataPath}`;\n    let method = 'POST';\n    if (params) {\n      let query = getQueryParams(params)\n      url = `${url}${query}`;\n    }\n    if (!props.dataSearchPath) {\n      method = 'GET'\n    }\n    let config = {\n      method: method\n    }\n    if (method === 'POST') {\n      config.body = JSON.stringify(body);\n      config.headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    }\n    return fetch(url, config).then(res => res.json());\n  }\n\n  /**\n   * @see search\n   * @param filter\n   * @param pageNumber\n   * @param pageSize\n   * @returns {Promise<T>}\n   */\n  const searchData = (filter: any, pageNumber: number = -1, pageSize: number = -1) => {\n    let params = {};\n    params['page'] = `${pageNumber}`;\n    params['perPage'] = `${pageSize}`;\n    return search(filter, params);\n  }\n\n  /**\n   * called from getDatasource.\n   * @param pageNumber\n   * @param pageSize\n   * @returns {Promise<T>}\n   */\n  const getData = (pageNumber: number = -1, pageSize: number = -1) => {\n    let url = `${props.dataPath}?page=${pageNumber}&perPage=${pageSize}`;\n    return fetch(url, {headers: {'Accept': 'application/json'}}).then(res => res.json())\n  }\n\n  /**\n   * AgGrid DataSource\n   * @returns {{getRows: IDatasource.getRows}}\n   */\n  const getDatasource = () => {\n    return {\n      getRows: (params) => {\n        const pageNumber = params.endRow / DEFAULT_PAGE_SIZE;\n        let request;\n        const fields = [];\n        let myFilterModel = params.filterModel;\n        if (props.filterModel) {\n          myFilterModel = Object.assign({}, myFilterModel, props.filterModel);\n        }\n        for (const field in myFilterModel) {\n          if (myFilterModel.hasOwnProperty(field)) {\n            fields.push(field);\n          }\n        }\n        const filter = {\n          filterModel: myFilterModel,\n          sortModel: params.sortModel\n        };\n        if (fields.length || params.sortModel.length) {\n          request = searchData(filter, pageNumber, DEFAULT_PAGE_SIZE);\n        } else {\n          request = getData(pageNumber, DEFAULT_PAGE_SIZE);\n        }\n        request\n          .then((page: any) => {\n            console.log('page', page);\n            const totalCount = (page.page - 1) * page.pageSize + (page.entities || []).length;\n            if (gridApi) {\n              gridApi.setInfiniteRowCount(Math.max(totalCount, page.totalEntityCount));\n            }\n            params.successCallback(page.entities || [], Math.max(totalCount, page.totalEntityCount));\n          })\n          .catch(error => {\n            console.log(error);\n            params.failCallback();\n          });\n      }\n    };\n  }\n\n  useEffect(() => {\n    if (props.columnsPath) {\n      getColumnDefs({});\n    }\n  }, [gridApi]);\n\n  return (\n    <div className=\"ag-theme-alpine\" style={{...props.style}}>\n      <AgGridReact\n        onGridReady={onGridReady}\n        rowData={props.rows}\n        columnDefs={props.columns}\n        animateRows={props.animateRows}\n        enableCellChangeFlash={props.enableCellChangeFlash}\n        enableColResize={props.enableColResize}\n        rowModelType={props.rowModelType}\n        onCellValueChanged={onCellValueChanged}/>\n    </div>\n  );\n}\n","import React, {useEffect, useRef, useState} from 'react';\nimport Chart from 'chart.js'\nimport _ from 'underscore';\n\nexport function DDChart(props) {\n\n  const [chartApi, setChartApi] = useState(null);\n\n  const ctx = useRef(null);\n\n  const destroyApi = () => {\n    if (chartApi) {\n      chartApi.destroy();\n    }\n  }\n\n  const getLabels = (data) => {\n    if (typeof props.getLabels === 'function') {\n      return props.getLabels(data)\n    } else if (Array.isArray(props.getLabels)) {\n      return props.getLabels;\n    }\n    let labelKey = props.labelKey || 'label';\n    let groupedData = _.groupBy(data, labelKey);\n    console.log('--- getLabels:groupedData ---', groupedData);\n    return Object.keys(groupedData);\n  }\n\n  const getData = (data) => {\n    if (typeof props.getData === 'function') {\n      return props.getData(data)\n    } else if (Array.isArray(props.getData)) {\n      return props.getData;\n    }\n    let labelKey = props.labelKey || 'label';\n    let groupedData = _.groupBy(data, labelKey);\n    console.log('--- getLabelCount:groupedData ---', groupedData);\n    return Object.values(groupedData).map(value => value.length);\n  }\n\n  const getLabelColor = (data) => {\n    if (typeof props.getLabelColor === 'function') {\n      return props.getLabelColor(data)\n    } else if (Array.isArray(props.getLabelColor)) {\n      return props.getLabelColor;\n    }\n    return getLabels(data).map(label => {\n      return {\n        r: Math.ceil(Math.random() * 255),\n        g: Math.ceil(Math.random() * 255),\n        b: Math.ceil(Math.random() * 255),\n        a: 0.2\n      };\n    });\n  }\n\n  const getBackgroundColor = (labelColor) => {\n    return labelColor.map(color => {\n      color.a = 0.2;\n      return `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`;\n    });\n  }\n\n  const getBorderColor = (labelColor) => {\n    return labelColor.map(color => {\n      color.a = 1;\n      return `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`;\n    });\n  }\n\n  const initChart = () => {\n    let labels = getLabels(props.data); // ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange']\n    let data = getData(props.data); // [12, 19, 3, 5, 2, 3]\n    let labelColor = getLabelColor(props.data);\n    let backgroundColor = getBackgroundColor(labelColor);\n    let borderColor = getBorderColor(labelColor);\n    const chart = new Chart(ctx.current, {\n      type: props.type || 'bar',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: `# of ${props.labelKey}`,\n          data: data,\n          backgroundColor: backgroundColor,\n          borderColor: borderColor,\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      }\n    });\n    console.log('--- chart --- ', chart);\n    setChartApi(chart);\n    return destroyApi;\n  }\n\n  useEffect(initChart, [props.data]);\n\n  return <canvas ref={ctx} height={props.height} width={props.width}/>\n}\n","import React from 'react'\n\nimport styles from './styles.module.css'\n\nexport const ExampleComponent = ({text}) => {\n  return <div className={styles.test}>Example Component: {text}</div>\n}\n\nexport {\n  DDAlert,\n  sendAlert,\n  sendErrorAlert,\n  sendSuccessAlert,\n  sendInfoAlert,\n  sendWarningAlert\n} from './alert';\n\nexport {\n  DDDataGrid\n} from './data-grid';\n\nexport {\n  DDChart\n} from './chart';\n","import React, {useEffect, useState} from 'react'\n\nimport {DDAlert, DDChart, DDDataGrid, ExampleComponent, sendInfoAlert, sendSuccessAlert} from 'dd-react-lib'\nimport {Button, Container} from '@material-ui/core'\nimport {createMuiTheme, makeStyles, ThemeProvider} from '@material-ui/core/styles';\nimport {blue, green} from '@material-ui/core/colors';\nimport 'dd-react-lib/dist/index.css'\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst App = () => {\n\n  const columns = [\n    {field: 'col1', headerName: 'Column 1', width: 250},\n    {field: 'col2', headerName: 'Column 2', width: 150, resizable: true},\n  ];\n\n  const rows = [\n    {id: 1, col1: 'Hello', col2: 'World'},\n    {id: 2, col1: 'XGrid', col2: 'is Awesome'},\n    {id: 3, col1: 'Material-UI', col2: 'is Amazing'},\n  ];\n\n  const [gridApi, setGridApi] = useState(null);\n  const [data, setData] = useState([]);\n\n  const onGridReady = (params) => {\n    console.log('--- params --- ', params);\n    setGridApi(params.api);\n    params.api.setRowData(rows)\n    params.api.setColumnDefs(columns);\n  }\n\n  useEffect(() => {\n    sendInfoAlert({\n      title: 'This is an info',\n      message: \"I'm the best for ever...\",\n      timeout: 1000\n    });\n    fetch('/users.json')\n      .then(res => res.json())\n      .then(response => setData(response.entities))\n  }, [gridApi]);\n\n  const columnMapper = (column) => {\n    let mapping = {\n      \"String\": \"text\",\n      \"Integer\": \"number\",\n      \"Short\": \"number\",\n      \"Long\": \"number\",\n      \"Double\": \"number\",\n      \"Date\": \"date\",\n      \"List\": \"array\"\n    }\n    let myColumn = Object.assign({}, column);\n    myColumn.type = mapping[myColumn.type] || myColumn.type;\n    return myColumn;\n  }\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: green,\n      secondary: blue,\n    },\n  });\n\n  const getLabels = (data) => {\n    return ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'];\n  }\n\n  const getData = (data) => {\n    return [12, 19, 3, 5, 2, 3];\n  }\n\n  const getLabelColor = (data) => {\n    return [\n      {r: 255, g: 99, b: 132, a: 0.2},\n      {r: 54, g: 162, b: 235, a: 0.2},\n      {r: 255, g: 206, b: 86, a: 0.2},\n      {r: 75, g: 192, b: 192, a: 0.2},\n      {r: 153, g: 102, b: 255, a: 0.2},\n      {r: 255, g: 159, b: 64, a: 0.2}\n    ]\n  }\n\n  const classes = useStyles();\n\n  return <Container>\n    <DDAlert show={true}/>\n    <ExampleComponent text=\"Djamma Dev React Library Example 😄\"/>\n    <ThemeProvider theme={theme}>\n      <Button variant=\"contained\" color=\"secondary\" className={classes.margin} onClick={(e) => {\n        console.log('----');\n        sendInfoAlert({\n          title: 'This is an info notification',\n          message: \"I'm the best for ever...\",\n          timeout: 5000\n        });\n      }}>Alert Info</Button>\n    </ThemeProvider>\n    <ThemeProvider theme={theme}>\n      <Button variant=\"contained\" color=\"primary\" className={classes.margin} onClick={(e) => {\n        console.log('----');\n        sendSuccessAlert({\n          title: 'This is a success notification',\n          message: \"I'm the best for ever...\",\n          timeout: 5000\n        });\n      }}>Alert Success</Button>\n    </ThemeProvider>\n\n    <h2>Auto load data</h2>\n    <DDDataGrid\n      rowModelType={\"infinite\"}\n      columnsPath={\"descriptions/user.json\"}\n      dataPath={\"users.json\"}\n      columns={columns}\n      rows={rows}\n      columnMapper={columnMapper}\n      style={{height: 300, width: '100%', marginBottom: 20}}/>\n    <h2>Passing data from parent</h2>\n    <DDDataGrid\n      onGridReady={onGridReady}\n      columns={columns}\n      rows={rows}\n      style={{height: 300, width: '100%', marginBottom: 20}}/>\n    <h2>Chart Js</h2>\n    <DDChart getLabels={getLabels} getData={getData} getLabelColor={getLabelColor} height={100} width={400}/>\n    <h2>Chart With Data</h2>\n    <DDChart type={\"doughnut\"} labelKey={\"promotion\"} data={data} height={100} width={400}/>\n  </Container>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}